parameters:
- name: version
  displayName: 'Specify build platform version'
  type: string
  default: "current"
- name: appVersion
  displayName: 'Specify build app version'
  type: string
  default: "18.0"
- name: azureSubscription
  displayName: 'Specify azure subscription name'
  type: string
  default: 'My Azure Service Connection'
- name: createRuntimePackages
  displayName: 'Specify boolean value for runtime package creation'
  type: boolean
  default: True
- name: configurationFilePath
  displayName: 'Specifies the path to the build-settings.json file'
  type: string
  default: '.azureDevOps\build-settings.json'
- name: publishTestApps
  displayName: 'Specifies if test apps are to be published as artifacts and to Azure Blob'
  type: boolean
  default: False
- name: cleanAllImages
  displayName: 'Specifies if all images should be cleaned after the build'
  type: boolean
  default: False
- name: SyncAppMode
  displayName: Publish Sync-NAVApp Mode
  type: string
  default: Add
  values:
  - Add
  - ForceSync
- name: TestsDebugMode
  displayName: Run Unit Tests in Debug Mode
  type: boolean
  default: False
- name: ReRunFailedTests
  displayName: ReRun Unit Tests that are failing
  type: boolean
  default: False
- name: FlushContainerCache
  displayName: Execute Flush-ContainerHelperCache after build
  type: boolean
  default: True
- name: RemoveBuildContainer
  displayName: Remove build container after build
  type: boolean
  default: True
- name: PublishOnCompile
  displayName: Publish app to container after compile
  type: boolean
  default: False
- name: AzureBlobFolderForVersion
  displayName: Create a folder structure in Azure Blob for each version
  type: boolean
  default: True
- name: changeBuild
  displayName: Build only changed apps
  type: boolean
  default: False
- name: BranchNamePattern
  displayName: Ticket number required
  type: string
  default: ""

stages:
- stage: Build
  jobs:
  - job: Build
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 10
    workspace:
      clean: outputs | resources | all 
    variables:      
      build.clean: all
      platform: x64
      appBuild: $[counter(variables['appVersion'],0)]
      appRevision: 0
      skipComponentGovernanceDetection: True

    steps:
    - checkout: self
      persistCredentials: true
      fetchDepth: 0
      fetchTags: true
      clean: true
      path: 's'

    - checkout: Template
      clean: false
      path: 's\bcbuildtemplate'

    - task: PowerShell@2
      displayName: 'Copy Build Template'
      inputs:
        targetType: filePath
        filePath: 'bcbuildtemplate\scripts\Copy-Template.ps1'
        arguments: '-AgentToolsDirectory "$(Agent.ToolsDirectory)"'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Reading Settings'
      env:
        Password: $(Password)
        SyncAppMode: ${{ parameters.SyncAppMode }}"
        BranchNamePattern: ${{ parameters.BranchNamePattern }}
        ChangeBuild: ${{ parameters.changeBuild }}
        TargetBranch: $(System.PullRequest.TargetBranch)
        SourceBranch: $(System.PullRequest.SourceBranch)
        sourceVersion: $(Build.SourceVersion)
        azstoragetenantid: $(AzStorageTenantId)
        azstorageclientid: $(AzStorageClientId)
        azstorageclientSecret: $(AzStorageClientSecret)          
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Read-Settings.ps1'
        arguments: '-configurationFilePath "$(Build.Repository.LocalPath)\${{ parameters.configurationFilePath }}" -appVersion "${{ parameters.appVersion }}.$(appBuild).$(appRevision)" -version ${{ parameters.version }} -branchName "$(Build.SourceBranch)" -changesOnly ("${{ parameters.changeBuild }}" -ieq "true" -and ("IndividualCI","BatchedCI","PullRequest","ResourceTrigger" -contains "$(Build.Reason)"))'
        failOnStderr: true
    
    - task: PowerShell@2
      displayName: 'Install bccontainerhelper'
      condition: and(succeeded(),ne(variables['appFolders'],''))
      env:
        azstoragetenantid: $(AzStorageTenantId)
        azstorageclientid: $(AzStorageClientId)
        azstorageclientSecret: $(AzStorageClientSecret)          
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Install-bccontainerhelper.ps1'
        failOnStderr: true
        
    - task: PowerShell@2
      displayName: 'Create Build Container'
      condition: and(succeeded(),ne(variables['appFolders'],''))
      env:
        Password: $(Password)
        LicenseFile: $(LicenseFile)
        InsiderSasToken: $(InsiderSasToken)
        azstoragetenantid: $(AzStorageTenantId)
        azstorageclientid: $(AzStorageClientId)
        azstorageclientSecret: $(AzStorageClientSecret)          
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Create-Container.ps1'
        arguments: '-configurationFilePath "$(Build.Repository.LocalPath)\${{ parameters.configurationFilePath }}"'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Compile App'
      condition: and(succeeded(),ne(variables['appFolders'],''))
      env:
        Password: $(Password)
        ChangeBuild: ${{ parameters.changeBuild }}
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Compile-App.ps1'
        arguments: '-appFolders "$(appFolders)" -appVersion "$(Build.BuildNumber)" -publishApp:([String]::Equals("${{ parameters.PublishOnCompile }}","True")) -skipVerification -changesOnly ("${{ parameters.changeBuild }}" -ieq "true" -and ("IndividualCI","BatchedCI","PullRequest","ResourceTrigger" -contains "$(Build.Reason)")) -SyncAppMode "${{ parameters.SyncAppMode }}"'
        failOnStderr: true
    
    - task: PowerShell@2
      displayName: 'Compile Test App'
      condition: and(succeeded(),ne(variables['testFolders'],''))
      env:
        Password: $(Password)
        ChangeBuild: ${{ parameters.changeBuild }}
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Compile-App.ps1'
        arguments: '-appFolders "$(testFolders)" -appVersion "$(Build.BuildNumber)" -publishApp:([String]::Equals("${{ parameters.PublishOnCompile }}","True")) -skipVerification -changesOnly ("${{ parameters.changeBuild }}" -ieq "true" -and ("IndividualCI","BatchedCI","PullRequest","ResourceTrigger" -contains "$(Build.Reason)")) -SyncAppMode "${{ parameters.SyncAppMode }}"'
        failOnStderr: true
    
    - task: PowerShell@2
      displayName: 'Sign App'
      condition: and(succeeded(),ne(variables['CodeSignPfxFile'],''),ne(variables['CodeSignPfxPassword'],''),ne(variables['appFolders'],''))
      env:
        codeSignPfxFile: $(CodeSignPfxFile)
        codeSignPfxPassword: $(CodeSignPfxPassword)
        azstoragetenantid: $(AzStorageTenantId)
        azstorageclientid: $(AzStorageClientId)
        azstorageclientSecret: $(AzStorageClientSecret)          
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Sign-App.ps1'
        arguments: '-appFolders "$(appFolders)"'
        failOnStderr: true
    
    - task: PowerShell@2
      displayName: 'Publish App'
      condition: and(succeeded(),ne('${{ parameters.PublishOnCompile}}','True'),ne(variables['appFolders'],''))
      env:
        Password: $(Password)      
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Publish-App.ps1'
        arguments: '-appFolders "$(appFolders)" -skipVerification:([String]::IsNullOrEmpty($CodeSignPfxPassword)) -SyncAppMode "${{ parameters.SyncAppMode }}"'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Publish Test App'
      condition: and(succeeded(),ne(variables['testFolders'],''),ne('${{ parameters.PublishOnCompile}}','True'))
      env:
        Password: $(Password)       
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Publish-App.ps1'
        arguments: '-appFolders "$(testFolders)" -skipVerification -SyncAppMode "${{ parameters.SyncAppMode }}"'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Set Test Secret'
      condition: and(succeeded(),ne(variables['TestSecret'],''),ne(variables['testFolders'],''))
      env:
        TestSecret: $(TestSecret)
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Set-TestSecret.ps1'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Run Tests'
      condition: and(succeeded(),ne(variables['testFolders'],''))
      env:
        Password: $(Password)
        TestParameters: $(TestParameters)
        LicenseFile: $(LicenseFile)
        TestLicenseFile: $(TestLicenseFile)
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Run-Tests.ps1'
        arguments: '-configurationFilePath "$(Build.Repository.LocalPath)\${{ parameters.configurationFilePath }}" -appFolders "$(testFolders)" -reRunFailedTests:([String]::Equals("${{ parameters.ReRunFailedTests }}","True")) -debugMode:([String]::Equals("${{ parameters.TestsDebugMode }}","True"))'
        failOnStderr: true
      
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: and(succeeded(),ne(variables['testFolders'],''))
      inputs:
        testResultsFormat: XUnit
        testResultsFiles: TestResults.xml
        failTaskOnFailedTests: true
    
    - task: PowerShell@2
      displayName: 'Get App RuntimePackage'
      condition: and(succeeded(),eq('${{ parameters.createRuntimePackages}}','True'),ne(variables['appFolders'],''))
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Get-AppRuntimePackage.ps1'
        arguments: '-appFolders "$(appFolders)" -appVersion "$(Build.BuildNumber)"'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Sign RuntimePackage'
      condition: and(succeeded(),eq('${{ parameters.createRuntimePackages}}','True'),ne(variables['CodeSignPfxFile'],''),ne(variables['CodeSignPfxPassword'],''),ne(variables['appFolders'],''))
      env:
        codeSignPfxFile: $(CodeSignPfxFile)
        codeSignPfxPassword: $(CodeSignPfxPassword)
        azstoragetenantid: $(AzStorageTenantId)
        azstorageclientid: $(AzStorageClientId)
        azstorageclientSecret: $(AzStorageClientSecret)          
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Sign-App.ps1'
        arguments: '-appFolders "$(appFolders)" -buildArtifactFolder "$(Build.ArtifactStagingDirectory)\RuntimePackages"'
        failOnStderr: true
        
    - task: PowerShell@2
      displayName: Remove Test App from Artifact Staging Directory
      condition: and(succeeded(),ne(variables['testFolders'],''),eq('${{ parameters.publishTestApps }}','False'))
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Remove-Items.ps1'
        arguments: '-appFolders "$(testFolders)" -artifactsFolder "$(Build.ArtifactStagingDirectory)"'
        failOnStderr: true
       
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      condition: and(succeeded(),ne(variables['appFolders'],''))
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '${{ parameters.appVersion }}'

    - task: PowerShell@2
      displayName: Copy App to Release folder
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),ne('${{ parameters.azureSubscription }}',''),ne(variables['azureStorageAccount'],''),ne(variables['appFolders'],''))
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\CopyTo-LatestFolder.ps1'
        arguments: '-appFolders "$(appFolders)" -buildArtifactFolder "$(Build.ArtifactStagingDirectory)" -releaseFolder "${{ parameters.version }}\${{ parameters.appVersion }}"'
        failOnStderr: true

    - task: PowerShell@2
      displayName: Copy Test App to Release folder
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),ne('${{ parameters.azureSubscription }}',''),ne(variables['azureStorageAccount'],''),ne(variables['testFolders'],''),eq('${{ parameters.publishTestApps }}','True'))
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\CopyTo-LatestFolder.ps1'
        arguments: '-appFolders "$(testFolders)" -buildArtifactFolder "$(Build.ArtifactStagingDirectory)" -releaseFolder "${{ parameters.version }}\${{ parameters.appVersion }}"'
        failOnStderr: true   

    - task: AzureFileCopy@5
      displayName: 'Copy Release Apps to Azure Blob with versions'
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),ne('${{ parameters.azureSubscription }}',''),ne(variables['azureStorageAccount'],''),ne(variables['appFolders'],''),eq('${{ parameters.AzureBlobFolderForVersion}}','True'))
      inputs:
        SourcePath: '$(Build.ArtifactStagingDirectory)\${{ parameters.version }}\${{ parameters.appVersion }}\*\*.app'
        azureSubscription: '${{ parameters.azureSubscription }}'
        Destination: AzureBlob
        storage: '$(azureStorageAccount)'
        ContainerName: '$(azureContainerName)'
        BlobPrefix: '$(Build.Repository.Name)\$(Build.SourceBranchName)\${{ parameters.appVersion }}\${{ parameters.version }}'

    - task: AzureFileCopy@5
      displayName: 'Copy Release Apps to Azure Blob latest'
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),ne('${{ parameters.azureSubscription }}',''),ne(variables['azureStorageAccount'],''),ne(variables['appFolders'],''),ne('${{ parameters.AzureBlobFolderForVersion}}','True'))
      inputs:
        SourcePath: '$(Build.ArtifactStagingDirectory)\${{ parameters.version }}\${{ parameters.appVersion }}\*\*.app'
        azureSubscription: '${{ parameters.azureSubscription }}'
        Destination: AzureBlob
        storage: '$(azureStorageAccount)'
        ContainerName: '$(azureContainerName)'
        BlobPrefix: '$(Build.Repository.Name)\$(Build.SourceBranchName)\latest'

    - task: AzureFileCopy@5
      displayName: 'Copy Artifact Apps to Azure Blob'
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),ne('${{ parameters.azureSubscription }}',''),eq('${{ parameters.version }}','current'),ne(variables['azureStorageAccount'],''),ne(variables['appFolders'],''))
      inputs:
        SourcePath: '$(Build.ArtifactStagingDirectory)\*\*.app'
        azureSubscription: '${{ parameters.azureSubscription }}'
        Destination: AzureBlob
        storage: '$(azureStorageAccount)'
        ContainerName: '$(azureContainerName)'
        BlobPrefix: 'Artifact\$(Build.Repository.Name)'

    - task: AzureFileCopy@5
      displayName: 'Copy Runtime Apps to Azure Blob'
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),ne('${{ parameters.azureSubscription }}',''),eq('${{ parameters.createRuntimePackages}}','True'),eq('${{ parameters.version }}','current'),ne(variables['azureStorageAccount'],''),ne(variables['appFolders'],''))
      inputs:
        SourcePath: '$(Build.ArtifactStagingDirectory)\RuntimePackages\*\*.app'
        azureSubscription: '${{ parameters.azureSubscription }}'
        Destination: AzureBlob
        storage: '$(azureStorageAccount)'
        ContainerName: '$(azureContainerName)'
        BlobPrefix: 'Runtime\$(Build.Repository.Name)'

    - task: PowerShell@2
      displayName: 'Remove Build Container'
      condition: and(ne(variables['reuseContainer'],'True'),eq('${{ parameters.RemoveBuildContainer }}','True'),ne(variables['appFolders'],''))
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Remove-Container.ps1'

    - task: PowerShell@2
      displayName: 'Remove Unused Container Image'
      condition: and(ne(variables['Agent.Name'],'Hosted Agent'),ne(variables['Agent.Name'],'Azure Pipelines*'),eq('${{ parameters.FlushContainerCache }}','True'),ne(variables['appFolders'],''))
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Remove-OldDockerImages.ps1'
        arguments: '-cleanAllImages "${{ parameters.cleanAllImages }}"'

    - task: PowerShell@2
      displayName: 'Validate App'
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),eq('${{ parameters.version }}','current'),ne(variables['appFolders'],''))
      env:
        LicenseFile: $(LicenseFile)
        InsiderSasToken: $(InsiderSasToken)
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Validate-App.ps1'
        arguments: '-configurationFilePath "$(Build.Repository.LocalPath)\${{ parameters.configurationFilePath }}" -artifactsFolder "$(Build.ArtifactStagingDirectory)" -branchName "$(Build.SourceBranch)" -version ${{ parameters.version }}'
        failOnStderr: true    

    - task: PowerShell@2
      displayName: 'Upgrade Microsoft Apps'
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),eq('${{ parameters.version }}','current'),ne(variables['appFolders'],''))
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Upgrade-MicrosoftApps.ps1'
        arguments: '-configurationFilePath "$(Build.Repository.LocalPath)\${{ parameters.configurationFilePath }}" -branchName "$(Build.SourceBranch)"'
        failOnStderr: true

    - task: PowerShell@2
      displayName: 'Deploy to Environment'
      condition: and(succeeded(),ne(variables['Build.Reason'],'PullRequest'),eq('${{ parameters.version }}','current'),ne(variables['appFolders'],''))
      env:
        ClientId: $(ClientId)
        ClientSecret: $(ClientSecret)
        PowerShellUsername: $(PowerShellUsername)
        PowerShellPassword: $(PowerShellPassword)
      inputs:
        targetType: filePath
        filePath: '$(Agent.ToolsDirectory)\bcbuildtemplate\Deploy-App.ps1'
        arguments: '-configurationFilePath "$(Build.Repository.LocalPath)\${{ parameters.configurationFilePath }}" -artifactsFolder "$(Build.ArtifactStagingDirectory)" -branchName "$(Build.SourceBranch)" -SyncAppMode "${{ parameters.SyncAppMode }}"'
        failOnStderr: true
